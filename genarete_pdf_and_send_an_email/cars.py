#!/usr/bin/env python3

import json
import locale
import sys
import reports
import os
import emails



def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a formatted name, to use in report"""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sale = {"sale": 0}
  pop_car_yr = {}  
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # Need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item   
    # Calculate the model the has the highest sales number
    if item["total_sales"]>max_sale["sale"]:
      item["sale"] = item["total_sales"]
      max_sale = item
    # Calculate the co nstruction year that has the highest sales number
    car_year = item["car"]["car_year"]
    if item["car"]["car_year"] not in pop_car_yr:
      pop_car_yr[car_year] = 0
    pop_car_yr[car_year] += item["total_sales"]
  pop_car_yr = sorted(pop_car_yr.items(), key=lambda x: x[1], reverse=True)  

  #summary the obtained information
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sale["car"]), max_sale["sale"]),
    "The most popular year was {} with {} sales.".format(pop_car_yr[0][0],pop_car_yr[0][1])  
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data
def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  car_data = cars_dict_to_table(data)
  
  # Genarete from this a PDF report
  title = "Sales Summary for the last month"
  report_path ="/home/cor/Documenti/python_sample/study/car_sc/report.pdf"
  additional_info = "<br/>".join(summary)

  reports.generate(report_path, title, additional_info, car_data)
"""
  # send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)
  
  message = emails.generate(sender, receiver, subject, body, report_path)
  emails.send(message)
"""

if __name__ == "__main__":
  main(sys.argv)

